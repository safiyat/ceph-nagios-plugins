#!/usr/bin/env python

import argparse
import os
import subprocess
import sys
import json

# default ceph values
CEPH_COMMAND = '/usr/bin/ceph'

# nagios exit code
STATUS_OK = 0
STATUS_WARNING = 1
STATUS_ERROR = 2
STATUS_UNKNOWN = 3

def main():

    # parse args
    parser = argparse.ArgumentParser(description="'ceph health' nagios plugin.")
    parser.add_argument('-e','--exe', help='ceph executable [%s]' % CEPH_COMMAND)
    parser.add_argument('-c','--conf', help='alternative ceph conf file')
    parser.add_argument('-V','--version', help='show version and exit', action='store_true')
    args = parser.parse_args()

    # validate args
    ceph_exec = args.exe if args.exe else CEPH_COMMAND
    if not os.path.exists(ceph_exec):
        print "ERROR: ceph executable '%s' doesn't exist" % ceph_exec
        return STATUS_UNKNOWN

    if args.version:
        print 'version %s' % __version__
        return STATUS_OK

    if args.conf and not os.path.exists(args.conf):
        print "ERROR: ceph conf file '%s' doesn't exist" % args.conf
        return STATUS_UNKNOWN

    # build command
    ceph_health = [ceph_exec]
    if args.conf:
        ceph_health.append('-c')
        ceph_health.append(args.conf)
    ceph_health.append('-s')
    ceph_health.append('--format')
    ceph_health.append('json')

    ceph_health.insert(0, "sudo")

    # exec command
    p = subprocess.Popen(ceph_health,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    output, err = p.communicate()

    # parse output
    if output:
        output = json.loads(output)
        health = output['health']['overall_status']
        if 'pgmap' in output and 'op_per_sec' in output[u'pgmap']:
            iops = output['pgmap']['op_per_sec']
        else:
            iops = -1

        if health == 'HEALTH_OK':
            print 'HEALTH_OK     IOPS:%d | HEALTH=1;;;; IOPS=%d;;;;' % (iops, iops)
            return STATUS_OK
        if health == 'HEALTH_WARN':
            print 'HEALTH_WARN     IOPS:%d | HEALTH=2;;;; IOPS=%d;;;;' % (iops, iops)
            return STATUS_WARNING
        if health == 'HEALTH_ERR':
            print 'HEALTH_ERR     IOPS:%d | HEALTH=3;;;; IOPS=%d;;;;' % (iops, iops)
            return STATUS_ERROR

    elif err:
        # read only first line of error
        one_line = err.split('\n')[0]
        if '-1 ' in one_line:
            idx = one_line.rfind('-1 ')
            print 'ERROR: %s: %s | HEALTH=0;;;;' % (ceph_exec, one_line[idx+len('-1 '):])
        else:
            print one_line

    return STATUS_UNKNOWN


if __name__ == "__main__":
    sys.exit(main())
