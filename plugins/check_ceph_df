#!/usr/bin/env python

"""
This plugin prints the ceph usage statistics on the current node.
"""

import argparse
import os
import rados
import sys
import json

# nagios exit code
STATUS_OK = 0
STATUS_WARNING = 1
STATUS_ERROR = 2
STATUS_UNKNOWN = 3

WARNING_PERC = 85
CRITICAL_PERC = 95


def main():

    # parse args
    parser = argparse.ArgumentParser(description="'ceph df' nagios plugin.")
    parser.add_argument('-r', '--rados-id', help='Rados ID.')
    parser.add_argument('-c', '--conf', help='Alternative ceph conf file.')

    args = parser.parse_args()

    if args.rados_id is not None and not isinstance(args.rados_id, str):
        raise TypeError('rados_id must be a string or None')
    if args.conf is not None and not isinstance(args.conf, str):
        raise TypeError('conf must be a string or None')

    if 'rados_id' in args:
        rados_id = args.rados_id
    else:
        rados_id = None

    if 'conf' in args:
        conf = args.conf
    else:
        conf = None

    if not conf:
        conf = '/etc/ceph/ceph.conf'

    cluster = rados.Rados(rados_id=rados_id, conffile=conf)
    cluster.connect()

    cluster_stats = cluster.get_cluster_stats()

    size = "Size=%.2fKB;;;; " % cluster_stats['kb']

    usage = "Usage=%.2fKB;%.2f;%.2f;%.2f;%.2f" % (
        cluster_stats['kb_used'], (cluster_stats['kb'] * WARNING_PERC) / 100.,
        (cluster_stats['kb'] * CRITICAL_PERC) / 100., 0, cluster_stats['kb'])

    perfdata = " ".join([size, usage])

    perc_used = (cluster_stats['kb_used'] * 100.) / cluster_stats['kb']
    message = "SIZE: %.2fGB    AVAIL:  %.2fGB    USED: %.2fGB    (%.2f %%) " \
              % (cluster_stats['kb'] / (2.**20),
                 cluster_stats['kb_avail'] / (2.**20),
                 cluster_stats['kb_used'] / (2.**20),
                 perc_used)

    print message + " | " + perfdata
    if perc_used > CRITICAL_PERC:
        return STATUS_ERROR
    elif perc_used > WARNING_PERC:
        return STATUS_WARNING
    elif perc_used >= 0:
        return STATUS_OK

    return STATUS_UNKNOWN


if __name__ == "__main__":
    sys.exit(main())
