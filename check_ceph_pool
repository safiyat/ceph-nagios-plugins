#!/usr/bin/env python

import argparse
import os
import subprocess
import sys
import json

# default ceph values
CEPH_COMMAND = '/usr/bin/ceph'

# nagios exit code
STATUS_OK = 0
STATUS_WARNING = 1    # 85
STATUS_ERROR = 2      # 95
STATUS_UNKNOWN = 3

WARNING_PERC = 85
ERROR_PERC = 95

def main():

    # parse args
    parser = argparse.ArgumentParser(description="'ceph pool' nagios plugin.")
    parser.add_argument('-e','--exe', help='ceph executable [%s]' % CEPH_COMMAND)
    parser.add_argument('-c','--conf', help='alternative ceph conf file')
    parser.add_argument('-V','--version', help='show version and exit', action='store_true')
    args = parser.parse_args()

    # validate args
    ceph_exec = args.exe if args.exe else CEPH_COMMAND
    if not os.path.exists(ceph_exec):
        print "ERROR: ceph executable '%s' doesn't exist" % ceph_exec
        return STATUS_UNKNOWN

    if args.version:
        print 'version %s' % __version__
        return STATUS_OK

    if args.conf and not os.path.exists(args.conf):
        print "ERROR: ceph conf file '%s' doesn't exist" % args.conf
        return STATUS_UNKNOWN

    # build command for pool list
    ceph_pool = [ceph_exec]
    if args.conf:
        ceph_pool.append('-c')
        ceph_pool.append(args.conf)
    ceph_pool.append('osd')
    ceph_pool.append('pool')
    ceph_pool.append('ls')
    ceph_pool.append('--format')
    ceph_pool.append('json')
    ceph_pool.insert(0, "sudo")
    # exec command
    p = subprocess.Popen(ceph_pool,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    output, err = p.communicate()
    pools = json.loads(output)

    # build command for pool quota
    ceph_pool = [ceph_exec]
    if args.conf:
        ceph_pool.append('-c')
        ceph_pool.append(args.conf)
    ceph_pool.append('--format')
    ceph_pool.append('json')
    ceph_pool.append('osd')
    ceph_pool.append('pool')
    ceph_pool.append('get-quota')
    ceph_pool.insert(0, "sudo")
    pool_details={}
    for pool in pools:
        p = subprocess.Popen(ceph_pool + [pool],stdout=subprocess.PIPE,stderr=subprocess.PIPE)
        output, err = p.communicate()
        output = json.loads(output)
        pool_details[output['pool_name']] = output

    # build command for getting size in bytes
    ceph_pool = [ceph_exec]
    if args.conf:
        ceph_pool.append('-c')
        ceph_pool.append(args.conf)
    ceph_pool.append('df')
    ceph_pool.append('--format')
    ceph_pool.append('json')
    ceph_pool.insert(0, "sudo")
    p = subprocess.Popen(ceph_pool,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    output, err = p.communicate()
    df_details = json.loads(output)['pools']

    for pool_detail in df_details:
        pool_details[pool_detail['name']]['bytes_used'] = pool_detail['stats']['bytes_used']

    status = STATUS_OK
    message = "%s %s   %s" % ('POOL'.ljust(20), 'SIZE'.center(12), 'USED %'.center(6))
    perfdata = ""
    maximum = {"value": 0.0}
    for pool in pool_details:
        size = "%.2f" % (float(pool_details[pool]['bytes_used'])/(1024**3)) + ' GB'
        if int(pool_details[pool]['quota_max_bytes']) != 0:
            perc = float(pool_details[pool]['bytes_used'])*100/pool_details[pool]['quota_max_bytes']
            if perc >= ERROR_PERC:
                status = STATUS_ERROR
            elif perc >= WARNING_PERC:
                status = STATUS_WARNING
            perc = "%.2f" % (perc)
        else:
            perc = '-'
        line = "\n" + "%s %s   %s" % (pool_details[pool]['pool_name'].ljust(20), size.center(12), perc.center(6))
        message += line
        perfdata += "%s=%sGB;%s;%s;; " % (pool_details[pool]['pool_name'], float(pool_details[pool]['bytes_used'])/(1024**3), pool_details[pool]['quota_max_bytes'] * (WARNING_PERC / 100.0) / (1024**3), pool_details[pool]['quota_max_bytes'] * (ERROR_PERC / 100.0) / (1024**3))
        if perc != '-':
            if maximum["value"] < float(perc):
                maximum["value"] = float(perc)
                maximum["text"] = line

    maximum["text"] = "Pool:" + maximum["text"].split()[0] + "    Size:" + "".join(maximum["text"].split()[1:3]) + "    Used:" + maximum["text"].split()[-1] + "%"
    print "%s | %s\n" % (maximum["text"], perfdata)
    print message
    return status


if __name__ == "__main__":
    sys.exit(main())
