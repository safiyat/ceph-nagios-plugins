#!/usr/bin/env python

import argparse
import os
import subprocess
import sys
import json

# default ceph values
CEPH_COMMAND = '/usr/bin/ceph'

# nagios exit code
STATUS_OK = 0
STATUS_WARNING = 1
STATUS_ERROR = 2
STATUS_UNKNOWN = 3
WARNING_PERC = 85
ERROR_PERC = 95

def main():

    # parse args
    parser = argparse.ArgumentParser(description="'ceph df' nagios plugin.")
    parser.add_argument('-e','--exe', help='ceph executable [%s]' % CEPH_COMMAND)
    parser.add_argument('-c','--conf', help='alternative ceph conf file')
    parser.add_argument('-V','--version', help='show version and exit', action='store_true')
    args = parser.parse_args()

    # validate args
    ceph_exec = args.exe if args.exe else CEPH_COMMAND
    if not os.path.exists(ceph_exec):
        print "ERROR: ceph executable '%s' doesn't exist" % ceph_exec
        return STATUS_UNKNOWN

    if args.version:
        print 'version %s' % __version__
        return STATUS_OK

    if args.conf and not os.path.exists(args.conf):
        print "ERROR: ceph conf file '%s' doesn't exist" % args.conf
        return STATUS_UNKNOWN

    # build command
    ceph_df = [ceph_exec]
    if args.conf:
        ceph_df.append('-c')
        ceph_df.append(args.conf)
    ceph_df.append('df')
    ceph_df.append('--format')
    ceph_df.append('json')

    ceph_df.insert(0, "sudo")

    # exec command
    p = subprocess.Popen(ceph_df,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    output, err = p.communicate()
    info = json.loads(output)

    size_gb = info['stats']['total_bytes']/float(2**30)
    avail_gb = info['stats']['total_avail_bytes']/float(2**30)
    used_gb = info['stats']['total_used_bytes']/float(2**30)
    perc_used = (used_gb * 100) / size_gb

    perfdata = "Size=%.2fGB;;;; Usage=%.2fGB;%.2f;%.2f;0;%.2f" % (size_gb, used_gb, ((size_gb * WARNING_PERC) / 100.0), ((size_gb * ERROR_PERC) / 100.0), size_gb)
    message = "SIZE: %.2fGB    AVAIL:  %.2fGB    USED: %.2fGB    (%.2f %%)    " % (size_gb, avail_gb, used_gb, perc_used)

    print message + " | " + perfdata
    if perc_used > ERROR_PERC:
        return STATUS_ERROR
    elif perc_used > WARNING_PERC:
        return STATUS_WARNING
    elif perc_used >= 0:
        return STATUS_OK

    return STATUS_UNKNOWN


if __name__ == "__main__":
    sys.exit(main())
